<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MainForm_StartupShowSplash_Checkbox_Station" xml:space="preserve">
    <value>Checkbox Station</value>
  </data>
  <data name="MainForm_StartupShowSplash_Connecting_to_SQL_server__" xml:space="preserve">
    <value>Connecting to SQL server: </value>
  </data>
  <data name="MainForm_StartupShowSplash_Searching_for_RFID_reader____" xml:space="preserve">
    <value>Searching for RFID reader ...</value>
  </data>
  <data name="Packing list error" xml:space="preserve">
    <value>Packing list was nok OK. This can because instruments are missing. Do you want to scan again?</value>
  </data>
  <data name="Missing instruments" xml:space="preserve">
    <value>Missing instruments</value>
  </data>
  <data name="Instrument mix" xml:space="preserve">
    <value>Scanned mix of instruments that are checked in and checked out. Can only check in or check out at one time. 
Remove instruments and scan again. </value>
  </data>
  <data name="Mix of check-in/check-out" xml:space="preserve">
    <value>Mix of check-in/check-out</value>
  </data>
  <data name="Instrument check out" xml:space="preserve">
    <value>Instruments successfully checked out!</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="Instruments sent to service" xml:space="preserve">
    <value>Instruments successfully sent to service!</value>
  </data>
  <data name="Not all checked out" xml:space="preserve">
    <value>Not all instruments have been checked out! You can still finish the operation. 
The instruments missing can be seen in Admin Station. Do you want to finish the operation with missing instruments?</value>
  </data>
  <data name="Finish operation" xml:space="preserve">
    <value>Finish operation</value>
  </data>
  <data name="All checked out" xml:space="preserve">
    <value>All instruments have been checked out. Do you want to finish the operation?</value>
  </data>
  <data name="Operation finished!" xml:space="preserve">
    <value>Operation finished!</value>
  </data>
  <data name="No tray!" xml:space="preserve">
    <value>No tray!</value>
  </data>
  <data name="More trays scanned" xml:space="preserve">
    <value>More than one tray scanned!</value>
  </data>
  <data name="No operation chosen." xml:space="preserve">
    <value>No operation chosen.</value>
  </data>
  <data name="Choose operation" xml:space="preserve">
    <value>No operation chosen. An operation must be chosen!
If the desired operation is not visible, create or start an operation in the 'Operations' tab.</value>
  </data>
  <data name="Continue?" xml:space="preserve">
    <value>Are you sure you want to continue?</value>
  </data>
  <data name="Check in" xml:space="preserve">
    <value>Check in</value>
  </data>
  <data name="Instruments checked in" xml:space="preserve">
    <value>Instruments successfully checked in!</value>
  </data>
  <data name="No active operation" xml:space="preserve">
    <value>No active operation</value>
  </data>
  <data name="Create or start operation" xml:space="preserve">
    <value>No active operations. Create or start an operation in the 'Operations' tab. </value>
  </data>
  <data name="More than one tray scanned. \nPacking list NOT validated. \nChecking in: {Instruments.Count} instruments." xml:space="preserve">
    <value>More than one tray scanned. \nPacking list NOT validated. \nChecking in: {Instruments.Count} instruments.</value>
  </data>
</root>